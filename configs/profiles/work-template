# Work Profile Configuration
# Optimized for: Corporate projects, team collaboration, accountability
# Philosophy: Professional reporting, code reviews, proper documentation

# ============================================================================
# USER IDENTITY - Work credentials
# ============================================================================
[user]
    # Your full name as registered in company systems
    name = {{USER_NAME}}
    # Your work email (company domain, linked to corporate accounts)
    email = {{USER_EMAIL}}
    # Optional: Company-issued GPG key for signed commits
    # signingkey = {{GPG_KEY_ID}}

# ============================================================================
# COMMIT SETTINGS - Corporate security requirements
# ============================================================================
[commit]
    # Optional: Sign commits with company GPG key
    # Often required by corporate security policies
    # gpgsign = true

# ============================================================================
# WORK WORKFLOW ALIASES - Professional reporting and collaboration
# ============================================================================
[alias]
    # DAILY STANDUP: Quick summary for team meetings
    # Usage: git standup (shows what you worked on yesterday)
    # Perfect for: Daily scrum meetings, status updates to manager
    standup = log --since='yesterday' --author='{{USER_EMAIL}}' --oneline --no-merges
    
    # WEEKLY REPORT: Comprehensive work summary
    # Usage: git work-log (shows all your work from past week)
    # Perfect for: Weekly reports, performance reviews, time tracking
    work-log = log --author='{{USER_EMAIL}}' --since='1 week ago' --oneline
    
    # CODE REVIEW: Preview changes before committing
    # Usage: git review (shows exactly what will be committed)
    # Perfect for: Self-review before push, ensuring quality
    review = diff --cached

# ============================================================================
# VERSION MANAGEMENT - Professional release handling
# ============================================================================
[tag]
    # Sort tags by version number (v1.0.0, v1.1.0, v2.0.0)
    # Ensures proper semantic versioning display
    # Critical for: Release management, deployment pipelines
    sort = version:refname

# ============================================================================
# BRANCH BEHAVIOR - Team collaboration with merge history
# ============================================================================
[branch]
    # Always merge instead of rebase (preserves collaboration history)
    # Shows who worked on what and when branches were integrated
    # Important for: Code archaeology, understanding team dynamics
    autoSetupMerge = always